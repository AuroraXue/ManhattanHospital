labs(list(title = "Average Sentence Length (in words)", x = "Year", y = "word in sentence"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
Demo=speech.list[speech.list$Party=="Democratic",]
Demo=Demo[!is.na(Demo$President),]
Repub=speech.list[speech.list$Party=="Republican",]
Repub=Repub[!is.na(Repub$President),]
Demo.Repub=rbind(Demo,Repub)
ggplot(data = Demo.Repub,mapping = aes(x=year,y=Words,color=Party))+
geom_point()+
geom_smooth(se=F,method="loess")+
labs(list(title = "Speech Length (in words)", x = "Year", y = "words in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
ggplot(data = Demo.Repub,mapping = aes(x=year,y=sentence,color=Party))+
geom_point()+
geom_smooth(se=F,method="loess")+
labs(list(title = "Speech Length (in sentences)", x = "Year", y = "sentences in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
ggplot(data = Demo.Repub,mapping = aes(x=year,y=word.count,color=Party))+
geom_point()+
geom_smooth(se=F,method="loess")+
labs(list(title = "Average Sentence Length (in words)", x = "Year", y = "words in sentence"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
folder.path="../data/InauguralSpeeches/"
fulltext<-Corpus(DirSource(folder.path))
fulltext<-tm_map(fulltext, stripWhitespace)
fulltext<-tm_map(fulltext, content_transformer(tolower))
fulltext<-tm_map(fulltext, removeWords, stopwords("english"))
fulltext<-tm_map(fulltext, removeWords, character(0))
fulltext<-tm_map(fulltext, removePunctuation)
fulltext<-tm_map(fulltext, stemDocument)
text<-tm_map(fulltext, stripWhitespace)
fulltext<-tm_map(fulltext, removePunctuation)
fulltext<-tm_map(fulltext, removeNumbers)
fulltext<-tm_map(fulltext, PlainTextDocument)
dtm <- DocumentTermMatrix(fulltext)
dtms <- removeSparseTerms(dtm, 0.1)
freq <- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
wf <- data.frame(word=names(freq), freq=freq)
ggplot(subset(wf, freq>300), aes(word, freq))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=45, hjust=1),plot.title = element_text(size = 20, face = "bold",hjust = 0.5))+
labs(list(title = "Words Frequency (more than 300 times) ", x = "Year", y = "words amount"))
nrow(subset(wf, freq>300))
wf[which.max(wf$freq),]
#people vs govern
for (i in 1:nrow(speech.list))
{
speech.list$people[i]=length(gregexpr("people",speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
speech.list$govern[i]=length(gregexpr("govern",speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
sublist=speech.list[,c("year","people","govern")]
sub=melt(sublist,id="year")
ggplot(data=sub)+
geom_point(aes(x=year, y=value, colour=variable))+
geom_smooth(aes(x=year, y=value, colour=variable),se=F,method="lm")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
for (i in 1:nrow(speech.list))
{
speech.list$great[i]=length(gregexpr("great",speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
ggplot(data=speech.list,aes(x=year,y=great))+
geom_bar(stat="identity")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
speech.list[which.max(speech.list$great),c("President","Date","great")]
packages.used=c("rvest", "xml2", "qdap","syuzhet", "ggplot2", "tm","tidytext","reshape2")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("xml2")
library("qdap")
library("syuzhet")
library("ggplot2")
library("tm")
library("tidytext")
library("reshape2")
source("../lib/speechFuncs.R")
print(R.version)
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
# Get link URLs
# f.speechlinks is a function for extracting links from the list of speeches.
inaug=f.speechlinks(main.page)
inaug=inaug[-nrow(inaug),] # remove the last line, irrelevant due to error.
#read in the csv data set
inaug.list=read.csv("../data/inauglist.csv", stringsAsFactors = FALSE)
speech.list=cbind(inaug.list, inaug)
speech.list=speech.list[,-5]
#delete the date column due to formatting error
colnames(speech.list)[colnames(speech.list)=="links"]="Date"
#name the correct date
#abtract the year of the speech
speech.list$year = rep(NA,nrow(speech.list))
for ( i in 1:nrow(speech.list))
{  n = nchar(speech.list$Date[i])
speech.list$year[i] = as.numeric(substring(speech.list$Date[i],n-3,n))
}
# Loop over each row in speech.list
speech.list$fulltext=NA
for(i in seq(nrow(speech.list))) {
text <- read_html(speech.list$urls[i]) %>% # load the page
html_nodes(".displaytext") %>% # isloate the text
html_text() # get the text
speech.list$fulltext[i]=text
# Create the file name
filename <- paste0("../data/InauguralSpeeches/",
speech.list$File[i], "-",
speech.list$Term[i], ".txt")
sink(file = filename) %>% # open file to write
cat(text)  # write the file
sink() # close the file
}
sentence.list=NULL
for(i in 1:nrow(speech.list)){
sentences=sent_detect(speech.list$fulltext[i],
endmarks = c("?", ".", "!", "|",";"))
if(length(sentences)>0){
word.count=word_count(sentences)
sentence.list=rbind(sentence.list,
cbind(speech.list[i,-ncol(speech.list)],
sentences=as.character(sentences),
word.count,
sent.id=1:length(sentences)
)
)
}
}
sentence.list=sentence.list[!is.na(sentence.list$word.count),]
#delete lines of non-sentences.
#plot the speech length vs year
ggplot(data = speech.list)+
geom_point(mapping = aes(x=year,y=Words,color=Party))+
geom_smooth(mapping = aes(x=year,y=Words),method="lm",se=F)+
labs(list(title = "Speech Length (in words)", x = "Year", y = "words in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
speech.list[which.max(speech.list$Words),c("President","year","Words")]
speech.list[which.min(speech.list$Words),c("President","year","Words")]
speech.list.new=speech.list[-which.max(speech.list$Words),]
speech.list.new=speech.list.new[-which.min(speech.list.new$Words),]
#plot the speech length (without outliers) vs year
ggplot(data = speech.list.new)+
geom_point(mapping = aes(x=year,y=Words,color=Party))+
geom_smooth(mapping = aes(x=year,y=Words),method="lm",se=F)+
labs(list(title = "Speech Length (in words, no outliers)", x = "Year", y = "words in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
speech.list$sentence=tapply(sentence.list$sent.id,sentence.list$year,length)
ggplot(data = speech.list)+
geom_point(mapping = aes(x=year,y=sentence,color=Party))+
geom_smooth(aes(x=year,y=sentence),se=F,method="lm")+
labs(list(title = "Speech Length (in secences)", x = "Year", y = "sentences in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
speech.list$word.count=tapply(sentence.list$word.count,sentence.list$year,mean)
ggplot(data = speech.list)+
geom_point(mapping = aes(x=year,y=word.count,color=Party))+
geom_smooth(mapping = aes(x=year,y=word.count),se=F,method="lm")+
labs(list(title = "Average Sentence Length (in words)", x = "Year", y = "word in sentence"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
Demo=speech.list[speech.list$Party=="Democratic",]
Demo=Demo[!is.na(Demo$President),]
Repub=speech.list[speech.list$Party=="Republican",]
Repub=Repub[!is.na(Repub$President),]
Demo.Repub=rbind(Demo,Repub)
ggplot(data = Demo.Repub,mapping = aes(x=year,y=Words,color=Party))+
geom_point()+
geom_smooth(se=F,method="loess")+
labs(list(title = "Speech Length (in words)", x = "Year", y = "words in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
ggplot(data = Demo.Repub,mapping = aes(x=year,y=sentence,color=Party))+
geom_point()+
geom_smooth(se=F,method="loess")+
labs(list(title = "Speech Length (in sentences)", x = "Year", y = "sentences in speech"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
ggplot(data = Demo.Repub,mapping = aes(x=year,y=word.count,color=Party))+
geom_point()+
geom_smooth(se=F,method="loess")+
labs(list(title = "Average Sentence Length (in words)", x = "Year", y = "words in sentence"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
folder.path="../data/InauguralSpeeches/"
fulltext<-Corpus(DirSource(folder.path))
fulltext<-tm_map(fulltext, stripWhitespace)
fulltext<-tm_map(fulltext, content_transformer(tolower))
fulltext<-tm_map(fulltext, removeWords, stopwords("english"))
fulltext<-tm_map(fulltext, removeWords, character(0))
fulltext<-tm_map(fulltext, removePunctuation)
fulltext<-tm_map(fulltext, stemDocument)
text<-tm_map(fulltext, stripWhitespace)
fulltext<-tm_map(fulltext, removePunctuation)
fulltext<-tm_map(fulltext, removeNumbers)
fulltext<-tm_map(fulltext, PlainTextDocument)
dtm <- DocumentTermMatrix(fulltext)
dtms <- removeSparseTerms(dtm, 0.1)
freq <- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
wf <- data.frame(word=names(freq), freq=freq)
ggplot(subset(wf, freq>300), aes(word, freq))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=45, hjust=1),plot.title = element_text(size = 20, face = "bold",hjust = 0.5))+
labs(list(title = "Words Frequency (more than 300 times) ", x = "Year", y = "words amount"))
nrow(subset(wf, freq>300))
wf[which.max(wf$freq),]
#people vs govern
for (i in 1:nrow(speech.list))
{
speech.list$people[i]=length(gregexpr("people",speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
speech.list$govern[i]=length(gregexpr("govern",speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
sublist=speech.list[,c("year","people","govern")]
sub=melt(sublist,id="year")
ggplot(data=sub)+
geom_point(aes(x=year, y=value, colour=variable))+
geom_smooth(aes(x=year, y=value, colour=variable),se=F,method="lm")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
for (i in 1:nrow(speech.list))
{
speech.list$great[i]=length(gregexpr("great",speech.list$fulltext[i])[[1]])/speech.list$Words[i]*100
}
ggplot(data=speech.list,aes(x=year,y=great))+
geom_bar(stat="identity")+
labs(list(title = "Words Frequncy (every 100 words)", x = "Year", y = "words"))+
theme(plot.title = element_text(size = 20, face = "bold",hjust = 0.5))
speech.list[which.max(speech.list$great),c("President","Date","great")]
qnorm(0.5)
qnorm(0.9)
ru(10000,0,1)
runif(10000,0,1)
a=rbernoulli(10000,0,1)
a=rbinom(10000,0,1)
sum(a)
rbinom(10000,0,1)
0.5^0.5
.5^.5
.5^.75
a=1/1.06
((a-a^11)/(1-a))*50+a^10＊1000
a=1/1.06
((a-a^11)/(1-a))*50+a^10*1000
a=1/1.03
((a-a^11)/(1-a))*3+a^10*100
a=1/1.04
((a-a^11)/(1-a))*3+a^10*100
2^20
2^19
2^18
2^17
10000*log(10000)
100000*log(100000)
1151293/92103.4
10*log(10)
log(100000)－log(10000)
log(100000)-log(10000)
log(100000)/log(10000)
2^9
2^12
2^13
2^15
2^17
2^16
a=(8/13)*0.03
b=(5/13)*0.04
a^2+b^2
sqrt(a^2+b^2)
0.08^2+0.01
0.0164*0.5*0.5
sqrt(0.0041)
0.15^2+0.09^2*4+2*2*.15*.09
0.1089/9
0.15^2+0.09^2*4+2*2*.15*.09/3
0.0729/9
0.09^2
####################################################
## Project saving and loading
####################################################
shrink <- function(x){
if(is.list(x) && !is.data.frame(x)){
if(is.reactivevalues(x)){
x <- lapply(reactiveValuesToList(x), function(y){
if(typeof(y)!='closure') shrink(y) else NULL
})
attr(x, 'wasReavtive') <- TRUE
} else {
## x is an ordinary list
## need to preserve attributes
attrs <- attributes(x)
x <- lapply(x, shrink)
attributes(x) <- attrs
}
} else {
if(typeof(x)!='closure') x else NULL
}
x
}
wasReactivevalues <- function(x){
!is.null(attr(x, 'wasReavtive'))
}
output$downloadProject <- downloadHandler(
filename = function() { 'MyProject.sData' },
content = function(file) {
isolate({
allData <- list(pp=shrink(projProperties),
dl=lapply(datList, function(d){
list('staticProperties'=d[['staticProperties']],
'dynamicProperties'=shrink(d[['dynamicProperties']]))
}),
sl=lapply(sheetList, function(d){
list('dynamicProperties'=shrink(d[['dynamicProperties']]))
}),
docl=shrink(docList))
save(allData, file=file)
})
}
)
loadProject <- function(file, replaceOrMerge='replace'){
load(file)
if(replaceOrMerge=='replace'){
for(n in names(datList)) datList[[n]] <<- NULL; projProperties[['activeDat']] <<- NULL
for(n in names(sheetList)) sheetList[[n]] <<- NULL; projProperties[['activeSheet']] <<- NULL
for(n in names(docList)) docList[[n]] <<- NULL; projProperties[['activeDoc']] <<- NULL
}
for(n in names(allData$pp)){
if(is.null(projProperties[[n]]) || projProperties[[n]] != allData$pp[[n]]){
projProperties[[n]] <<- allData$pp[[n]]
}
}
for(di in names(allData$dl)){
if(is.null(datList[[di]])){ # new data
datList[[di]] <<- DatClass$new('staticProperties'=allData$dl[[di]][['staticProperties']])
datList[[di]][['dynamicProperties']] <<- reactiveValues()
setDatReactives(di)
}
for(n in names(allData$dl[[di]][['dynamicProperties']])){
x <- allData$dl[[di]][['dynamicProperties']][[n]]
if(n=='fieldsList'){
if(is.null(datList[[di]][['dynamicProperties']][[n]])) datList[[di]][['dynamicProperties']][[n]] <<- list()
names1 <- names(x)
for(n1 in names1){
if(wasReactivevalues(x[[n1]])){
if(is.null(datList[[di]][['dynamicProperties']][[n]][[n1]])) datList[[di]][['dynamicProperties']][[n]][[n1]] <<- reactiveValues()
names2 <- names(x[[n1]])
for(n2 in names2){
datList[[di]][['dynamicProperties']][[n]][[n1]][[n2]] <<- x[[n1]][[n2]]
}
} else {
datList[[di]][['dynamicProperties']][[n]][[n1]] <<- x[[n1]]
}
}
} else {
datList[[di]][['dynamicProperties']][[n]] <<- x
}
}
}
for(si in names(allData$sl)){
if(is.null(sheetList[[si]])){ # new sheet
sheetList[[si]] <<- createNewSheetObj(withPlotLayer=FALSE)
setSheetReactives(si)
}
for(n in names(allData$sl[[si]][['dynamicProperties']])){
x <- allData$sl[[si]][['dynamicProperties']][[n]]
if(n=='layerList'){
if(is.null(sheetList[[si]][['dynamicProperties']][[n]])) sheetList[[si]][['dynamicProperties']][[n]] <<- list()
names1 <- names(x)
for(n1 in names1){
if(wasReactivevalues(x[[n1]])){
if(is.null(sheetList[[si]][['dynamicProperties']][[n]][[n1]]))
sheetList[[si]][['dynamicProperties']][[n]][[n1]] <<- createNewLayer()
names2 <- names(x[[n1]])
for(n2 in names2){
if(n2=='aesList'){
names3 <- names(x[[n1]][[n2]])
for(n3 in names3){
if(wasReactivevalues(x[[n1]][[n2]][[n3]])){
names4 <- names(x[[n1]][[n2]][[n3]])
for(n4 in names4){
sheetList[[si]][['dynamicProperties']][[n]][[n1]][[n2]][[n3]][[n4]] <<- x[[n1]][[n2]][[n3]][[n4]]
}
setAesReactives(si,n1,n3)
} else {
sheetList[[si]][['dynamicProperties']][[n]][[n1]][[n2]][[n3]] <<- x[[n1]][[n2]][[n3]]
}
}
} else {
sheetList[[si]][['dynamicProperties']][[n]][[n1]][[n2]] <<- x[[n1]][[n2]]
}
}
} else {
sheetList[[si]][['dynamicProperties']][[n]][[n1]] <<- x[[n1]]
}
}
} else {
sheetList[[si]][['dynamicProperties']][[n]] <<- x
}
}
}
for(di in names(allData$docl)){
if(is.null(docList[[di]])){ # new doc
docList[[di]] <<- reactiveValues()
}
for(n in names(allData$docl[[di]])){
x <- allData$docl[[di]][[n]]
docList[[di]][[n]] <<- x
}
}
## update all UI
sapply(unique(c(names(input), names(updateInput))), triggerUpdateInput)
updateTabsetPanel(session, 'mainNavBar', selected='Visualize')
}
observe({
inFile <- input[['loadProject']]
isolate({
if (!is.null(inFile)){
loadProject(file=inFile$datapath, replaceOrMerge=input[['loadProjectAction']])
}
})
})
observe({
v <- input$openSampleProj
isolate({
file <- paste('samples', input[['sampleProj']], sep='/')
if(v && file.exists(file)){
loadProject(file=file, 'replace')
}
})
})
spending=read.csv("spending_NYS.csv")
install.packages("maps")
library(maps)
map("state")
map("NY")
map("state")
map("nyc")
library(maps)
map("nyc")
devtools::install_github("zachcp/nycmaps")
libary(nycmaps)
library(maps)
library(maps)
library(nycmaps)
map("nyc")
a=c(1,NA,3,2,NA)
is.na(a)
a[is.na(a)]=0
a
a=c(1,NA,3,2,NA)
a[which(is.na(a))]=0
a
install.packages("shinythemes")
shiny::runApp('Documents/Spr2017-proj2-grp9/shinyapp')
shiny::runApp('Documents/Spr2017-proj2-grp9/shinyapp')
runApp('Documents/Spr2017-proj2-grp9/shinyapp')
runApp('Documents/Spr2017-proj2-grp9/shinyapp')
source('help_func.R')
setwd("~/Documents/Spr2017-proj2-grp9/shinyapp")
runApp()
source("help_func.R")
runApp()
source("help_func.R")
source("HospitalMap.R")
source("Plot.R")
runApp()
new_complications<-as.data.frame(matrix(NA,ncol=length(levels(complications$Measure.Name)),nrow=length(levels(complications$Hospital.Name))))
colnames(new_complications)<-levels(complications$Measure.Name)
colnames(new_complications)
rownames(new_complications)<-levels(complications$Hospital.Name)
for(i in rownames(new_complications)){
for(j in colnames(new_complications)){
new_complications[i,j]=complications$Score[complications$Hospital.Name==i&complications$Measure.Name==j]
}
}
new_complications<-new_complications[,-4]
new_complications<-apply(new_complications,2,order)
rownames(new_complications)<-levels(complications$Hospital.Name)
averageNYCperformance<-rep(6,ncol(new_complications))
new_complications=rbind(new_complications,averageNYCperformance)
View(new_complications)
x="A wound that splits open  after surgery on the abdomen or pelvis"
name(which(new_complications[,x]==1))
names(which(new_complications[,x]==1))
runApp()
runApp()
View(new_complications)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
source("help_func.R")
source("HospitalMap.R")
source("Plot.R")
runApp()
shiny::runApp()
source("help_func.R")
source("HospitalMap.R")
source("Plot.R")
runApp()
shiny::runApp()
runApp()
source("help_func.R")
source("HospitalMap.R")
source("Plot.R")
runApp()
